
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ rsample      1.2.1
✔ dials        1.3.0     ✔ tune         1.2.1
✔ infer        1.0.7     ✔ workflows    1.1.4
✔ modeldata    1.4.0     ✔ workflowsets 1.1.0
✔ parsnip      1.2.1     ✔ yardstick    1.3.1
✔ recipes      1.1.0     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed)
> library(parallel)
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
> 
> num_cores <- detectCores()
> cl <- makePSOCKcluster(num_cores)
> registerDoParallel(cl)
> 
> train <- vroom("./train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("./test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> train$ACTION <- factor(train$ACTION)
> 
> amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(),outcome = vars(ACTION)) %>%
+   step_zv(all_predictors()) %>%
+   step_normalize(all_nominal_predictors())
> prepped_recipe <- prep(amazon_recipe)
> baked_train <- bake(prepped_recipe, new_data=train) 
> baked_test <- bake(prepped_recipe, new_data=test)
> 
> my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> pen_wf <- workflow() %>%
+   add_recipe(amazon_recipe) %>%
+   add_model(my_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 5, repeats=1)
> 
> ## Run the CV
> CV_results <- pen_wf %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc)) #, f_meas, sens, recall, spec, precision, accuracy)) #Or leave metrics NULL
> 
> ## Find Best Tuning Parameters
> bestTune <- CV_results %>%
+ select_best(metric = "roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_wf <- pen_wf %>%
+ finalize_workflow(bestTune) %>%
+ fit(data=train)
> 
> ## Predict
> amazon_predictions <- final_wf %>%
+   predict(new_data = test, type="prob") # "class"(yes or no) or "prob"(probability)
> 
> kaggle_submission <- amazon_predictions %>% 
+   select(.pred_1) %>%
+   rename(ACTION=.pred_1) %>%
+   mutate(id = row_number())
> 
> ## Write out the file
> vroom_write(x=kaggle_submission, file="./PenLogPreds.csv", delim=",")
> 
> stopCluster(cl)
> 
> proc.time()
   user  system elapsed 
 36.294   1.282 136.659 
